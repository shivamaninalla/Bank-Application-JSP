package com.monocept.dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;

import javax.sql.DataSource;

import com.monocept.model.Customer;
import com.monocept.model.Transaction;

public class TransactionDbUtil {
	private DataSource dataSource;

	public TransactionDbUtil(DataSource dataSource) {
		super();
		this.dataSource = dataSource;
	}

	public List<Transaction> getTransactions(String email) throws SQLException {

		List<Transaction> transactions = new ArrayList<>();
		Connection conn = dataSource.getConnection();

		String query =

				"SELECT " + "t.sender_account_number, " + "t.receiver_account_number, " + "t.transaction_type, "
						+ "t.transaction_amount, " + "t.date_of_transaction " + "FROM " + "transactions t "
						+ "JOIN accounts a_sender ON t.sender_account_number = a_sender.account_number "
						+ "JOIN accounts a_receiver ON t.receiver_account_number = a_receiver.account_number "
						+ "JOIN customer c_sender ON c_sender.customer_id = a_sender.customer_id "
						+ "JOIN customer c_receiver ON c_receiver.customer_id = a_receiver.customer_id " + "WHERE "
						+ "c_sender.email_id = ? OR c_receiver.email_id = ?";

		PreparedStatement st2 = conn.prepareStatement(query);
		st2.setString(1, email);
		st2.setString(2, email);
		ResultSet rs2 = st2.executeQuery();

		while (rs2.next()) {

			int senderAccountNumber = rs2.getInt("sender_account_number");
			int receiverAccountNumber = rs2.getInt("receiver_account_number");
			String type = rs2.getString("transaction_type");
			double amount = rs2.getDouble("transaction_amount");
			String date = rs2.getString("date_of_transaction");

			Transaction transaction = new Transaction(senderAccountNumber, receiverAccountNumber, type, amount, date);
			transactions.add(transaction);

		}
		return transactions;

	}

	public void newTransaction(String email, int receiver_account_number, int amount) throws SQLException {

		Connection conn = dataSource.getConnection();

		String query1 = "select a.balance from accounts a join customer c on c.customer_id=a.customer_id where email_id=?";
		PreparedStatement st1 = conn.prepareStatement(query1);
		st1.setString(1, email);
		ResultSet rs1 = st1.executeQuery();

//		String query2 = "select balance from accounts where account_number=?";
//		PreparedStatement st2 = conn.prepareStatement(query2);
//		st2.setInt(1, receiver_account_number);
//		ResultSet rs2 =st2.executeQuery();

		if (rs1.getDouble("balance") > amount) {
			String q = "select balance from accounts where account_number=?";
			PreparedStatement st = conn.prepareStatement(q);
			st.setInt(1, receiver_account_number);
			ResultSet rs = st.executeQuery();
			Double receiver_balance = rs.getDouble("balance");

			String query3 = "update account set  balance=? where account_number=?";
			PreparedStatement st3 = conn.prepareStatement(query3);
			st3.setDouble(1, receiver_balance + amount);
			st3.setInt(2, receiver_account_number);
			st3.executeUpdate();

			String q2 = "select a.account_number from accounts a join customer c on c.customer_id=a.customer_id where email_id=?";
			PreparedStatement st5 = conn.prepareStatement(q2);
			st5.setString(1, email);
			ResultSet rs5 = st5.executeQuery();

			String query4 = "update account set  balance=? where account_number=?";
			PreparedStatement st4 = conn.prepareStatement(query4);
			st4.setDouble(1, rs1.getDouble("amount") - amount);
			st4.setDouble(2, rs5.getInt("account_number"));
			st4.executeUpdate();

		} else {

		}

	}

	public boolean editProfile(Customer customer) throws SQLException {
		Connection conn = dataSource.getConnection();
		String query = "update customer set first_name=? ,last_name=? , password=? where email_id=?";
		PreparedStatement p = conn.prepareStatement(query);
		p.setString(1, customer.getFirst_name());
		p.setString(2, customer.getLast_name());
		p.setString(3, customer.getPassword());
		p.setString(3, customer.getEmail());

		int rs = p.executeUpdate();
		return rs == 1 ? true : false;

	}

}
